<!DOCTYPE html>
<html>
  <head>
	<meta charset="UTF-8">
	<title>RDF Canonicalisation</title>
  </head>
  <body>
	 <h1>RDF Canonical Ordering Test</h1>
	 <p>
	 Fill in a well-formed <strong><u>RDF/XML</u></strong> document and press the <i>Submit</i> button. The document will
	 be parsed and the set of triples will be emitted. The ordering and naming of the triples should be consistent irrespective
	 of the input order of the document. Non-ASCII results are undefined — there's no collation magic as yet. If it
	 breaks, please tell <samp>nevali</samp> on <samp>#swig</samp> how you broke it. There will almost certainly
	 be ways that you can do it.
	 </p>
	 <p>
	   (Apologies for the lack of support for other formats. I had RDF/XML-to-triples code already. The algorithm itself is
	   obviously serialisation-independent).
	 </p>
	 <p>
	   Ignore the formatting of objects in the triple output; it's just cosmetic laziness, not a proper serialisation.
	   It's the order and naming of the triples that's important rather than the format of the output per se.
	 </p>
	 <p>
	 You'll find a particularly evil test-case <a href="https://gist.github.com/942191">here</a>.
     </p>
	 <p>
	   Code on <a href="https://github.com/nevali/canonical">GitHub</a>.
	 </p>
	 <p>
	   The algorithm generates identifiers for bnodes based upon two concrete aspects of the nodes:
	 </p>
	 <ul>
	   <li>The non-determinsitic portions of the triples (i.e., anything which is a bnode reference is replaced with a fixed placeholder — for example, "_:a owl:sameAs _:b" becomes "# owl:sameAs #"). This set is sorted, then hashed to give a "non-deterministic hash value" for the node.</li>
	   <li>The predicates and subject's non-deterministic hash values of all of the triples where that node is an object — this has the effect of fingerprinting the bnode on the basis of its relationship to other nodes.</li>
	 </ul>
	 <p>
	   The non-deterministic hash value is combined with the set of inbound references (which is itself sorted lexographically) and hashed to produce the final identifier of the bnode, which is then propagated to whichever triples use that node as an object.
	 </p>
<?php

if(!strlen(@$_POST['rdf']))
{
$_POST['rdf'] = '<?xml version="1.0" encoding="UTF-8" ?>' . "\n" .
   '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">' . "\n" .
   '</rdf:RDF>';
}
?>
	<form method="POST">
	  <textarea name="rdf" rows="20" cols="80"><?php e(@$_POST['rdf']); ?></textarea>
	  <input type="submit">
	</form>	 
	<?php
	 if(isset($result) && is_array($result))
	 {
		 echo '<pre>';
		 ob_start();
		 echo implode("\n", $result);
		 e(ob_get_clean());
		 echo '</pre>';
	 }
     ?>
  </body>
</html>
